export interface MimieBuffer extends Buffer {
    type: string;
    typeFull: string;
    charset: string;
}

export function dataUriToBuffer(uri: string): MimieBuffer {
    if (!/^data:/i.test(uri)) {
        throw new TypeError(
            '`uri` does not appear to be a Data URI (must begin with "data:")'
        );
    }

    // Strip newlines for clean processing
    uri = uri.replace(/[\r\n]/g, '');

    // Split the URI into metadata and data portions
    const firstComma = uri.indexOf(',');
    if (firstComma === -1 || firstComma <= 4) {
        throw new TypeError('malformed data: URI');
    }

    // Parse metadata after "data:" scheme
    const meta = uri.substring(5, firstComma).split(';');
    let type = meta[0] || 'text/plain';
    let typeFull = type;
    let charset = '';
    let base64 = false;

    // Process parameters, making base64 check case-insensitive and trimming for charset
    for (let i = 1; i < meta.length; i++) {
        let param = meta[i].trim().toLowerCase();
        if (param === 'base64') {
            base64 = true;
        } else {
            typeFull += `;${meta[i]}`;

            if (param.startsWith('charset=')) {
                charset = meta[i].substring(8).trim();
            }
        }
    }

    // Default to US-ASCII if type is not provided and no charset specified
    if (!meta[0] && !charset.length) {
        typeFull += ';charset=US-ASCII';
        charset = 'US-ASCII';
    }

    // Extract and decode the data portion
    let data = uri.substring(firstComma + 1);

    let decodedData;
    try {
        decodedData = decodeURIComponent(data);
    } catch (err) {
        throw new Error(`Invalid data URI: ${err.message}`);
    }

    // Determine encoding and create Buffer, handling potential errors
    const encoding = base64 ? 'base64' : 'ascii';
    let buffer;
    try {
        buffer = Buffer.from(decodedData, encoding) as any;
    } catch (err) {
        throw new Error(`Invalid data in data URI: ${err.message}`);
    }

    // Set MIME type and charset properties
    buffer.type = type;
    buffer.typeFull = typeFull;
    buffer.charset = charset;

    return buffer;
}

export default dataUriToBuffer;
